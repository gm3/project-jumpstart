import os
import subprocess

def create_file(path, content=''):
    """Create a file with the given content."""
    with open(path, 'w') as file:
        file.write(content)

def prompt_project_type():
    """Prompt the user to select the project type."""
    print("Select the project type:")
    print("1. Web/React Project")
    print("2. CLI Tool")
    print("3. Both")
    print("4. VRM Project")  # New option for VRM Project
    choice = input("Enter your choice (1, 2, 3, or 4): ")
    return choice

def create_project_structure(project_type):
    """Create the project structure based on the project type."""
    # Common Directories
    directories = [
        'data_processing', 'tests', 'docs', 'scripts',
        '.github/workflows', '.github/ISSUE_TEMPLATE'
    ]

    # Web/React specific directories
    if project_type in ["1", "3"]:
        directories.extend([
            'frontend/src', 'frontend/public', 
            'backend/src', 'backend/controllers', 'backend/models', 'backend/routes', 'backend/utils',
        ])
    
    # VRM Project specific directories
    if project_type == "4":
        directories.extend([
            'vrm-project/blends', 'vrm-project/files', 
            'vrm-project/metadata', 'vrm-project/scripts', 'vrm-project/vrms/beta'
        ])

    # Create directories
    for directory in directories:
        os.makedirs(directory, exist_ok=True)

    # Create common files
    create_common_files()

    # Web/React specific files
    if project_type in ["1", "3"]:
        create_web_project_files()

    print("Project structure created successfully.")

def create_common_files():
    """Create common files for any project type."""
    create_file('README.md', '# Project Title\n\nDescription of the project.\n')
    create_file('LICENSE', 'MIT License\n\n[Your License Details Here]\n')
    create_file('.env.example', '# Environment variables template\n')
    create_file('CONTRIBUTING.md', '# Contributing Guidelines\n')
    create_file('CODE_OF_CONDUCT.md', '# Code of Conduct\n')
    create_file('.github/ISSUE_TEMPLATE/bug_report.md', '# Bug Report Template\n')
    create_file('.github/ISSUE_TEMPLATE/feature_request.md', '# Feature Request Template\n')
    create_gitignore()
    # Other common files...

def create_web_project_files():
    """Create files specific to a web project."""
    create_file('frontend/src/App.js', '// Main frontend application file\n')
    create_file('frontend/public/index.html', '<!-- Entry HTML file -->\n')
    create_file('backend/src/server.js', '// Main server file\n')
    create_file('Dockerfile', '# Docker configuration\n')
    create_file('docker-compose.yml', '# Docker Compose configuration\n')
    create_file('.github/workflows/main.yml', '# GitHub Actions CI/CD workflow\n')
    create_file('package.json', '{\n  "name": "new-project",\n  "version": "1.0.0"\n}')
    # Other web project files...

def create_gitignore():
    """Create the .gitignore file."""
    gitignore_content = """
# Dependency directories
node_modules/
venv/
env/
ENV/
env.bak/
ENV.bak/

# Logs
logs
*.log
npm-debug.log*
yarn-debug.log*
yarn-error.log*

# Runtime data
pids
*.pid
*.seed
*.pid.lock

# Directory for instrumented libs generated by jscoverage/JSCover
lib-cov

# Coverage directory used by tools like Istanbul
coverage

# nyc test coverage
.nyc_output

# Grunt intermediate storage (https://gruntjs.com/creating-plugins#storing-task-files)
.grunt

# Bower dependency directory (https://bower.io/)
bower_components

# Jekyll metadata directory (https://jekyllrb.com/)
_site

# dotenv environment variable files
.env
.env.test
.env*.local

# Debug log from npm
npm-debug.log*

# Build files
build/
dist/

# TypeScript cache
*.tsbuildinfo

# IDE and editor folders
.idea/
.vscode/
*.swp
*.swo
*.sublime-workspace
*.sublime-project

# OS generated files
.DS_Store
.DS_Store?
._*
.Spotlight-V100
.Trashes
ehthumbs.db
Thumbs.db
    """
    create_file('.gitignore', gitignore_content)

def install_frontend_libraries():
    """Install frontend libraries for a web project."""
    try:
        subprocess.run(["npm", "install", "react", "react-dom", "three"], check=True)
        # Add other libraries as needed
    except Exception as e:
        print(f"Error installing libraries: {e}")

if __name__ == '__main__':
    project_type = prompt_project_type()
    create_project_structure(project_type)
    if project_type in ["1", "3"]:
        install_frontend_libraries()
